{"title":"ネスト深いオブジェクトの値でソートする","date":"xx","tags":"TypeScript JavaScript","id":"accessDeepProperty","summary":" オブジェクトが並んだ配列をソートするとする。 \n どんなオブジェクトが流れてくるかわからないが、指","html":"<p>オブジェクトが並んだ配列をソートするとする。</p>\n<p>どんなオブジェクトが流れてくるかわからないが、指し示されたプロパティでソートしたいときはないだろうか？私はある。(強引)</p>\n<h2 id=\"やりたいこと\">やりたいこと</h2>\n<p>例えばオブジェクトの配列<code>[obj1,obj2,obj3]</code>があったとき、<br><code>obj1.hello.world</code>の値、<code>obj2.hello.world</code>の値、<code>obj3.hello.world</code>の値を比較して、オブジェクトを並び替える。</p>\n<p>これを、比較する値のオブジェクト内の深さやプロパティ名が任意のときにやりたい。\n先に使用例を見てもらう。</p>\n<h2 id=\"使用例\">使用例</h2>\n<p>次のように使える<code>sortDeepProperty()</code>をつくる。</p>\n<pre><code class=\"language-ts\">const arr = [\n  { hello: { world: 3 } },\n  { hello: { world: 1 } },\n  { hello: { world: 2 } },\n]\nsortDeepProperty(arr, [&#39;hello&#39;,&#39;world&#39;])\nconsole.log(arr)\n/*\n[\n  { hello: { world: 1 } },\n  { hello: { world: 2 } },\n  { hello: { world: 3 } }\n]\n*/</code></pre>\n<h2 id=\"実装\">実装</h2>\n<p>再帰的にオブジェクトのプロパティを指し示す関数<code>returnDeepProperty()</code>を作り、これを使って<code>Array.prototype.sort()</code>で比較する</p>\n<pre><code class=\"language-ts\">\n// returnDeepProperty(obj, [&#39;a&#39;,&#39;b&#39;]) の戻り値は obj.a.b の値と同じ\nfunction returnDeepProperty (object: object, propertyPointer: string[]): number {\n  if (!(propertyPointer[0] in object)) {\n    throw &#39;the property is undefined&#39;\n  }\n  if (propertyPointer.length === 1) {\n    if(typeof object[ propertyPointer[0] ] === &#39;number&#39;) {\n      return object[ propertyPointer[0] ]\n    }\n    throw &#39;the property is not number&#39;\n  }\n  return returnDeepProperty( object[ propertyPointer[0] ], propertyPointer.slice(1,) )\n}\n\nfunction sortDeepProperty (arr: object[], propertyPointer: string[]): void {\n  arr.sort( (a,b) =&gt; {\n    returnDeepProperty(a, propertyPointer) - returnDeepProperty(b, propertyPointer)\n  })\n  return\n}\n\nconst arr = [\n  { hello: { world: 3 } },\n  { hello: { world: 1 } },\n  { hello: { world: 2 } },\n]\nsortDeepProperty(arr, [&#39;hello&#39;,&#39;world&#39;])\nconsole.log(arr)\n/*\n[\n  { hello: { world: 1 } },\n  { hello: { world: 2 } },\n  { hello: { world: 3 } }\n]\n*/</code></pre>\n<h2 id=\"まとめ\">まとめ</h2>\n<p>ようするにオブジェクト<code>obj</code>があったときに、再帰関数を利用して<code>obj[a][b][c]...</code>の値を見たかった。  </p>\n<p>思いついたコードを書き留めたくなったので書き残しておく。</p>\n"}